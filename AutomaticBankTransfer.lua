return (function(T, ...) local PSU_CHECKMARK = 'This file was obfuscated using PSU Obfuscator 5.1.A | https://discord.gg/zyTU229f54' local V256374850 = T[(373603687)];  local V423809690 = T[(0x7872809)];  local V91 = T[(360355332)];  local V0 = T[((878898272 - #("bro's looking at the source code")))];  local V625053312 = T[(0xA46CAE9)];  local V159 = T["LUQE2tYN"];  local V896452013 = T[((#{0x353;} + 0x19EA1FF4))];  local V703189860 = T["i0Bxf0V"];  local V642428631 = T[(0x387B2B58)];  local V92172226 = T[(0x88911EB)];  local V694206298 = T['x2pZ0hg'];  local V165 = T['gbOno52h'];  local V1 = T[(0x35933FAE)];  local V732791276 = T[(0xA39A200)];  local V168 = T[(0x2CDDF309)];  local V188045117 = T.Ait1P5eIe3;  local V90 = T[((877228182 - #("require")))];  local V387702073 = T[((303379598 - #("Crop")))];  local V546544979 = T.hvdkPJRn;  local V32 = T["RmADV3"];  local V198325100 = T[((676967241 - #("moonsec go br")))];  local V921406824 = T[((364145960 - #("print")))];  local V2 = T[((#{878;(function(...)return 975,0x0F1,0x288;end)()} + 49530135))];  local V36 = T[(0xDD386D4)];  local V3 = T[((#{} + 0x5E1290D))];  local V960042016 = T[((247355449 - #("cant even find copium")))];  local V132 = T.DZPLo5G;  local V5 = T[(0x38D6280F)];  local V79899727 = T[((#{0x150;0x28C;366;0x170;} + 0x18606A68))];  local V427546772 = T[((#{951;0x2F5;0x27A;(function(...)return 0x00E,0x31D,0x1B9;end)()} + 551344948))];  local V248 = T[((744730116 - #("ratio + L + bozo + try deobfuscating this kid + I deobfuscated your mother + PSU on top")))];  local V731481506 = T[(0xBB69EB2)];    local GetFEnv = ((getfenv) or (function(...) return (_ENV); end)); local Storage, _, Environment = ({}), (""), (GetFEnv(V1));  local bit32 = ((Environment[""..T[V642428631]..T[V732791276]..T[V731481506].."\51\50"]) or (Environment["\98"..T[V732791276].."\116"]) or ({})); local BitXOR = (((bit32) and (bit32["\98\120"..T[V423809690].."\114"])) or (function(A, B) local P, C = V1, V0; while ((A > V0) and (B > V0)) do local X, Y = A % V2, B % V2; if X ~= Y then C = C + P; end; A, B, P = (A - X) / V2, (B - Y) / V2, P * V2; end; if A < B then A = B; end; while A > V0 do local X = A % V2; if X > V0 then C = C + P; end; A, P =(A - X) / V2, P * V2; end; return (C); end));  local MOD = (V2 ^ V32); local MODM = (MOD - V1); local BitSHL, BitSHR, BitAND;    local SubString = (_["\115\117"..T[V642428631]]); local Character = (_["\99\104"..T[V921406824]..T[V92172226]]); local Byte = (_["\98"..T[V427546772].."\116"..T["wTOusc"]]); local GSub = (_[""..T[V198325100].."\115\117\98"]);    local Pairs = (Environment[""..T[V79899727]..T[V921406824].."\105"..T[V92172226]..T[V625053312]]); local Type = (Environment["\116\121\112\101"]); local Select = (Environment["\115"..T.wTOusc..T[V256374850]..T.wTOusc..T[V188045117].."\116"]); local RawSet = (Environment[""..T[V92172226].."\97\119"..T[V625053312]..T['wTOusc']..T[V731481506]]); local LDExp = ((Environment[""..T['hZxNZLS']..T[V921406824].."\116"..T[V546544979]][""..T[V256374850]..T[V896452013].."\101"..T[V703189860]..T[V79899727]]) or (function(Value, Exponent, ...) return ((Value * V2) ^ Exponent); end)); local UnPack = ((Environment[""..T.HXhGIr3Ik.."\110"..T[V79899727]..T[V921406824]..T[V188045117].."\107"]) or (Environment["\116\97"..T[V642428631].."\108"..T.wTOusc]["\117\110"..T[V79899727]..T[V921406824].."\99"..T[V960042016]])); local SetMetaTable = (Environment["\115"..T.wTOusc..T[V731481506]..T.hZxNZLS.."\101"..T[V731481506].."\97\116\97\98"..T[V256374850].."\101"]); local Floor = (Environment[""..T["hZxNZLS"].."\97"..T[V731481506].."\104"][""..T[V387702073].."\108"..T[V423809690]..T[V423809690]..T[V92172226]]); local ToNumber = (Environment["\116\111"..T["rCU2iMO0hB"].."\117\109\98"..T['wTOusc']..T[V92172226]]);    BitSHL = ((bit32["\108\115\104\105"..T[V387702073]..T[V731481506]]) or (function(A, B, ...) if (B < V0) then return (BitSHR(A, -(B))); end; return ((A * V2 ^ B) % V2 ^ V32); end)); BitSHR = ((bit32["\114"..T[V625053312]..T[V546544979].."\105\102"..T[V731481506]]) or (function(A, B, ...) if (B < V0) then return (BitSHL(A, -(B))); end; return (Floor(A % V2 ^ V32 / V2 ^ B)); end)); local BitOR = (bit32[""..T[V642428631].."\111"..T[V92172226]]) or (function(A, B, ...) return (MODM - BitAND(MODM - A, MODM - B)); end); local BitNOT = (bit32["\98\110\111\116"]) or (function(A, ...) return (MODM - A); end); BitAND = (bit32[""..T[V642428631].."\97"..T["rCU2iMO0hB"]..T[V896452013]]) or (function(A, B, ...) return (((A + B) - BitXOR(A, B)) / V2); end);  if ((not (Environment[""..T[V642428631]..T[V732791276]..T[V731481506]..T.v9PUhJuJH..T[V694206298]])) and (not (Environment[""..T[V642428631]..T[V732791276]..T[V731481506]]))) then  bit32[""..T[V642428631]..T.rCU2iMO0hB..T[V423809690]..T[V731481506]] = BitNOT; bit32["\108"..T[V625053312]..T[V546544979]..T[V732791276]..T[V387702073].."\116"] = BitSHL; bit32[""..T[V642428631].."\120\111"..T[V92172226]] = BitXOR; bit32["\98\111\114"] = BitOR; bit32[""..T[V92172226]..T[V625053312]..T[V546544979]..T[V732791276]..T[V387702073].."\116"] = BitSHR; bit32["\98\97\110"..T[V896452013]] = BitAND;  end;    local Remove = (Environment[""..T[V731481506]..T[V921406824].."\98"..T[V256374850]..T.wTOusc][""..T[V92172226].."\101"..T["hZxNZLS"]..T[V423809690]..T.RgJEr..T['wTOusc']]); local Concatenate = (Environment[""..T[V731481506]..T[V921406824]..T[V642428631]..T[V256374850].."\101"][""..T[V188045117].."\111\110"..T[V188045117].."\97"..T[V731481506]]); local Insert = (Environment[""..T[V731481506]..T[V921406824].."\98"..T[V256374850].."\101"]["\105"..T["rCU2iMO0hB"].."\115\101"..T[V92172226].."\116"]); local Create = (((Environment["\116"..T[V921406824].."\98"..T[V256374850].."\101"]["\99\114"..T["wTOusc"]..T[V921406824].."\116"..T.wTOusc])) or ((function(Size, ...) return ({ UnPack({}, V0, Size); }); end)));  Environment["\98\105\116"..T['v9PUhJuJH'].."\50"] = bit32;  local PrimaryXORKey = (V159);    local CHECKMark = string.reverse('45f922UTyz/gg.drocsid//:sptth | A.1.5 rotacsufbO USP gnisu detacsufbo saw elif sihT') local F = (V91 + V165); local G, Dictionary = ({}), ({}); for H = V0, F - V1 do local Value = Character(H); G[H] = Value; Dictionary[H] = Value; Dictionary[Value] = H; end; local ByteString, Position = (function(ByteString) local X, Y, Z = Byte(ByteString, V1, V3); if ((X + Y + Z) ~= V248) then PrimaryXORKey = PrimaryXORKey + V132; F = F + V168; end; ByteString = SubString(ByteString, V5);  local C, D, E = (""), (""), ({}); local I = V1; local function K() local L = ToNumber(SubString(ByteString, I, I), V36); I = I + V1; local M = ToNumber(SubString(ByteString, I, I + L - V1), V36); I = I + L; return (M); end; C = Dictionary[K()]; E[V1] = C; while (I < #ByteString) do local N = K(); if G[N] then D = G[N]; else D = C .. SubString(C, V1, V1); end; G[F] = C .. SubString(D, V1, V1); E[#E + V1], C, F = D, D, F + V1; end; return (Concatenate(E)); end)("PSU|"), (V91 - V90);local function CalculateVM(Index, Value, ...)if (Index == 641857089) then return (BitXOR(BitXOR((BitXOR(Value, 552126)) - 299906, 900979), 393971));elseif (Index == 632712709) then return (BitXOR(((Value) - 9749) - 180870, 421309));elseif (Index == 19493514) then return (BitXOR(BitXOR(BitXOR(Value, 721541), 906236), 213353));elseif (Index == 968846959) then return (BitXOR(((Value) - 339943) - 158161, 393203));elseif (Index == 225170039) then return (BitXOR((BitXOR(BitXOR(Value, 735098), 234361)) - 744932, 523733));elseif (Index == 43316422) then return ((BitXOR(BitXOR((Value) - 378265, 256280), 51598)) - 153277);elseif (Index == 187439117) then return ((BitXOR(BitXOR((Value) - 15945, 195142), 30043)) - 577535);elseif (Index == 109564655) then return (BitXOR(((BitXOR((Value) - 340778, 586730)) - 350780) - 245679, 599061));elseif (Index == 526913957) then return (BitXOR(((BitXOR((Value) - 710186, 201063)) - 891543) - 937262, 678152));elseif (Index == 270481254) then return (BitXOR(BitXOR(((BitXOR(Value, 627339)) - 236624) - 794349, 636820), 81984));elseif (Index == 939339410) then return (BitXOR((((Value) - 133851) - 774469) - 922560, 306875));elseif (Index == 411793903) then return ((BitXOR(BitXOR(((Value) - 84975) - 244438, 202518), 420586)) - 118905);elseif (Index == 235722656) then return ((BitXOR(BitXOR((Value) - 619364, 810514), 904887)) - 224970);else end; end;local V2 = T[((49530144 - #("1+1=3")))];  local V3 = T[((#{(function(...)return 350,0x3A9;end)()} + 0x5E1290B))];  local V0 = T[((878898270 - #("you are going to the backrooms")))];  local V65536 = T[((105668314 - #("7gb remaining...")))];  local V1 = T[(898842542)];  local V16777216 = T[((258599350 - #("average obfuscator by flirt#5996")))];  local V4 = T[(0xEF22709)];  local V256 = T[((#{385;} + 145964638))];      local function gBits8() local F = BitXOR(Byte(ByteString, Position, Position), PrimaryXORKey); PrimaryXORKey = F % V256; Position = (Position + V1); return (F); end; local function gBits16() local W, X = Byte(ByteString, Position, Position + V2); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % V256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % V256; Position = Position + V2; return ((X * V256) + W); end; local function gBit(Bit, Start, End) if (End) then local R = (Bit / V2 ^ (Start - V1)) % V2 ^ ((End - V1) - (Start - V1) + V1); return (R - (R % V1)); else local P = V2 ^ (Start - V1); return (((Bit % (P + P) >= P) and (V1)) or(V0)); end; end; local function gBits32() local W, X, Y, Z = Byte(ByteString, Position, Position + V3); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % V256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % V256; Y = BitXOR(Y, PrimaryXORKey); PrimaryXORKey = Y % V256; Z = BitXOR(Z, PrimaryXORKey); PrimaryXORKey = Z % V256; Position = Position + V4; return ((Z * V16777216) + (Y * V65536) + (X * V256) + W); end;  local Mode = "\35"; local function _R(...) return ({...}), Select(Mode, ...); end;local function Deserialize(...) local V26 = T[(0x9D0D17B)];  local V52 = T[(455116872)];  local V21 = T[((#{(function(...)return ;end)()} + 126491202))];  local V718282 = T['Niaj3Ix0bh'];  local V3 = T[(98642189)];  local V36 = T[((#{74;0x313;0x094;(function(...)return 935;end)()} + 0xDD386D0))];  local V1 = T[(0x35933FAE)];  local V256 = T[(145964639)];  local V2 = T[((#{0x0C3;0x3C2;0x083;(function(...)return 656,480,0x07A;end)()} + 49530133))];  local V7 = T[((#{0x0FC;(function(...)return 69,50,0x258;end)()} + 0xE279644))];  local V31 = T[(513499464)];  local V990911 = T[((765600649 - #("cant even find copium")))];  local V5000 = T.pHZJT;  local V20 = T[((#{200;167;} + 158031668))];  local V2047 = T[((642553691 - #("you are going to brazil")))];  local V5 = T[(953559055)];  local V4 = T[((250750759 - #("you are going to the backrooms")))];  local V8 = T[((#{9;(function(...)return 0x16A,...;end)(827,0x206,0x31E)} + 0x229B3DC9))];  local V32 = T['RmADV3'];  local V6 = T[((988442265 - #("No")))];  local V0 = T[((#{107;510;0x2C9;0x24A;} + 0x3462EC3C))];  local V267881 = T[((889810568 - #("John 7:24 NIV - Stop judging by mere appearances, but instead judge correctly.")))];  local V900189 = T[(861226322)];  local V14 = T['vcCvE'];  local V716409 = T[(962181371)];  local V1023 = T[((546469825 - #("You: print(oy) PSU: return  ,jaj, szeretem a fÃ©rfiakat, akik nem hazudnakà¨¯à© à¨®à©à¨ à¨®à¨°à¨¦à¨¾à¨ à¨¨à©à©° à¨ªà¨¿à¨à¨° à¨à¨°à¨¦à¨¾ à¨¹à¨¾à¨ à¨à©à¨  à¨¨à¨¹à©à¨ à¨¬à©à¨²à¨£à¨¾Ð»ÐµÑ Ñ Ð»ÑÐ±Ð»Ñ Ð¼ÑÐ¶ÑÐ¸Ð½ Ð½Ðµ Ð±ÑÐ´Ñ Ð²ÑÐ°ÑÑyo tÃ´i yÃªu ÄÃ n Ã´ng sáº½ khÃ´ng nÃ³i dá»iØ£ÙØª Ø£Ø­Ø¨ Ø§ÙØ±Ø¬Ø§Ù ÙÙ ÙÙØ°Ø¨")))];        local function Deserialize(...)  	local Instructions = ({}); 	local Functions = ({}); 	local Constants = ({});  			 	for Index = V0, gBits32(PrimaryXORKey) - V1, V1 do Functions[Index] = Deserialize(); end;  	local ParameterCount = gBits8(PrimaryXORKey);   							for Index = V0, gBits32(PrimaryXORKey) - V1, V1 do 								local Type = gBits8(PrimaryXORKey);  								if (Type == V6) then  									local Bool = gBits8(PrimaryXORKey); 									Constants[Index] = (Bool ~= V0);  								elseif (Type == V14) then  									while (true) do 										if PSU_CHECKMARK ~= CHECKMark then break end  local Length = gBits32(PrimaryXORKey); 										if (Length == V0) then Constants[Index] = (''); break; end;  										if (Length > V5000) then 											local Constant, ByteString = (''), (SubString(ByteString, Position, Position + Length - V1)); 											Position = Position + Length; 											for Index = V1, #ByteString, V1 do local Byte = BitXOR(Byte(SubString(ByteString, Index, Index)), PrimaryXORKey); PrimaryXORKey = Byte % V256; Constant = Constant .. Dictionary[Byte]; end; 											Constants[Index] = Constant; 										else 											local Constant, Bytes = (''), ({Byte(ByteString, Position, Position + Length - V1)}); 											Position = Position + Length; 											for Index, Byte in Pairs(Bytes) do local Byte = BitXOR(Byte, PrimaryXORKey); PrimaryXORKey = Byte % V256; Constant = Constant .. Dictionary[Byte]; end; 											Constants[Index] = Constant; 										end;  										break; 									end; elseif (Type == V26) then  									while (true) do 										local Left = gBits32(PrimaryXORKey); 										local Right = gBits32(PrimaryXORKey); 										local IsNormal = V1; 										local Mantissa = (gBit(Right, V1, V20) * (V2 ^ V32)) + Left; 										local Exponent = gBit(Right, V21, V31); 										local Sign = ((-V1) ^ gBit(Right, V32)); 										if (Exponent == V0) then 											if (Mantissa == V0) then 												Constants[Index] = (Sign * V0); 												break; 											else 												Exponent = V1; 												IsNormal = V0; 											end; 										elseif(Exponent == V2047) then 											Constants[Index] = (Mantissa == V0) and (Sign * (V1 / V0)) or (Sign * (V0 / V0)); 											break; 										end; 										Constants[Index] = LDExp(Sign, Exponent - V1023) * (IsNormal + (Mantissa / (V2 ^ V52))); 										break; 									end; elseif (Type == V36) then 									while (true) do  		 								if PSU_CHECKMARK ~= CHECKMark then break end  local Length = gBits32(PrimaryXORKey); 										Constants[Index] = SubString(ByteString, Position, Position + Length - V1); 										Position = Position + Length;  										break; 									end; 								else                                     Constants[Index] = nil 								end; 							end;  							local Count = gBits32(PrimaryXORKey); 							for Index = V0, Count - V1, V1 do Instructions[Index] = ({}); end;  							for Index = V0, Count - V1, V1 do 								local InstructionData = gBits8(PrimaryXORKey); 								if (InstructionData ~= V0) then 									InstructionData = InstructionData - V1; 									local D, Enum, E, B, A, C = V0, V0, V0, V0, V0, V0; 									local InstructionType = gBit(InstructionData, V1, V3);  							if (InstructionType == V5) then  B = (gBits32(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); D = ({}); for Index = V1, C, V1 do D[Index] = ({[V0] = gBits8(PrimaryXORKey), [V1] = gBits16(PrimaryXORKey)}); end;  elseif (InstructionType == V6) then  elseif (InstructionType == V2) then  B = Instructions[(gBits32(PrimaryXORKey))]; Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); elseif (InstructionType == V1) then  B = (gBits32(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); elseif (InstructionType == V3) then  B = Instructions[(gBits32(PrimaryXORKey))]; C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); elseif (InstructionType == V0) then  B = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); end;  							if (gBit(InstructionData, V5, V5) == V1) then B = Constants[B]; end; if (gBit(InstructionData, V6, V6) == V1) then C = Constants[C]; end; if (gBit(InstructionData, V4, V4) == V1) then A = Constants[A]; end; if (gBit(InstructionData, V8, V8) == V1) then E = Instructions[gBits32(PrimaryXORKey)]; else E = Instructions[Index + V1]; end;  							if (gBit(InstructionData, V7, V7) == V1) then D = ({}); for Index = V1, gBits8(), V1 do D[Index] = gBits32(); end; end;  							local Instruction = Instructions[Index];  							Instruction['pzpOFYq9'] = D; Instruction[-V900189] = E; Instruction['Jjyab'] = B; Instruction["VQwuTuJqMD"] = Enum; Instruction[V990911] = A; Instruction["RGNQ"] = C; end; end; 	local StackSize = gBits16(PrimaryXORKey);   	return ({ 	["yNB"] = Functions; 	['zzAukOfmCM'] = V0; 	['e5hX'] = Constants; 	[-V718282] = ParameterCount; 	[V716409] = StackSize; 	[V267881] = Instructions; 	});  end;    return (Deserialize(...)); end;    local function Wrap(Chunk, UpValues, Environment, ...)  		local Constants = Chunk["e5hX"]; 	local InitialInstructionPoint = 0; 	local Instructions = Chunk[267881]; 	local Functions = Chunk['yNB']; 	local StackSize = Chunk[716409]; 	local ParameterCount = Chunk[-718282];  	return (function(...)  				local OP_A = 990911; 		local lUpValues = ({}); 		local OP_B = 'Jjyab'; 		local OP_E = -900189; 		local OP_D = 'pzpOFYq9'; 		local DecryptConstants = (true); 		local PCount = (Select(Mode, ...) - 1); 		local Top = -(1); 		local Stack = {}; 		local OP_ENUM = 'VQwuTuJqMD'; 		local OP_C = 'RGNQ'; 		local Arguments = {...}; 		local VMKey = (597450228); 		local VarArg = {}; 		local InstructionPoint = Instructions[InitialInstructionPoint];  		for Index = 0, PCount, 1 do 			if (Index >= ParameterCount) then 				VarArg[Index - ParameterCount] = Arguments[Index + 1]; 			else 				Stack[Index] = Arguments[Index + 1]; 			end; 		end;  		local VarArgs = PCount - ParameterCount + 1;  		while (true) do             if PSU_CHECKMARK ~= CHECKMark then break end  			local Instruction = InstructionPoint; 			local Enum = Instruction[OP_ENUM]; 			InstructionPoint = Instruction[OP_E];if (Enum <= 59) then if (Enum <= 29) then if (Enum <= 14) then if (Enum <= 6) then if (Enum <= 2) then if (Enum <= 0) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum == 1) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 2) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 4) then if (Enum > 3) then if (Stack[Instruction[OP_A]] ~= Instruction[OP_C]) then InstructionPoint = Instruction[OP_B]; end;elseif (Enum < 4) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 5) then do return (Stack[Instruction[OP_A]]); end;elseif (Enum <= 6) then Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 10) then if (Enum <= 8) then if (Enum == 7) then local A = Instruction[OP_A]; Stack[A] = 0 + (Stack[A]); Stack[A + 1] = 0 + (Stack[A + 1]); Stack[A + 2] = 0 + (Stack[A + 2]); local Index = Stack[A]; local Step = Stack[A + 2]; if (Step > 0) then if (Index > Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end; elseif (Index < Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end;elseif (Enum <= 8) then do return (Stack[Instruction[OP_A]]); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 9) then Stack[Instruction[OP_A]] = Instruction[OP_B] ^ Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 10) then Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]];end;elseif (Enum <= 12) then if (Enum > 11) then local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; do return; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 12) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 13) then Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 14) then if (Stack[Instruction[OP_A]]) then InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum <= 21) then if (Enum <= 17) then if (Enum <= 15) then InstructionPoint = Instruction[OP_B];elseif (Enum == 16) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B] - Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return Stack[A](UnPack(Stack, A + 1, Top)) end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 17) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 19) then if (Enum == 18) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 19) then Stack[Instruction[OP_A]] = Instruction[OP_B] - Stack[Instruction[OP_C]];end;elseif (Enum > 20) then for Index = Instruction[OP_A], Instruction[OP_B] do Stack[Index] = (nil); end;elseif (Enum < 21) then  Stack[Instruction[OP_A]] = Instruction[OP_B] + Stack[Instruction[OP_C]];end;elseif (Enum <= 25) then if (Enum <= 23) then if (Enum == 22) then Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0);elseif (Enum <= 23) then local A = Instruction[OP_A]; local Results = { Stack[A](Stack[A + 1]); }; local Limit = Instruction[OP_C]; local K = 0; for I = A, Limit do K = K + 1; Stack[I] = Results[K]; end; for I = Limit + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum > 24) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]];elseif (Enum < 25) then  Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 27) then if (Enum == 26) then Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 27) then Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 28) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 29) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 44) then if (Enum <= 36) then if (Enum <= 32) then if (Enum <= 30) then local A = Instruction[OP_A]; local C = Instruction[OP_C]; local D = A + 2; local Result = ({ Stack[A](Stack[A + 1], Stack[D]); }); for Index = 1, C do Stack[D + Index] = Result[Index]; end; local R = Result[1]; if (R) then Stack[D] = R; InstructionPoint = Instruction[OP_B]; end;elseif (Enum == 31) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 32) then Stack[Instruction[OP_A]] = Instruction[OP_B] ^ Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 34) then if (Enum > 33) then local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end;elseif (Enum < 34) then  local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]];end;elseif (Enum == 35) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 36) then UpValues[Instruction[OP_B]] = Stack[Instruction[OP_A]];end;elseif (Enum <= 40) then if (Enum <= 38) then if (Enum == 37) then Stack[Instruction[OP_A]] = Create(256);elseif (Enum <= 38) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 39) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 40) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 42) then if (Enum > 41) then Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]];elseif (Enum < 42) then  Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]];end;elseif (Enum > 43) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 44) then  Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C];end;elseif (Enum <= 51) then if (Enum <= 47) then if (Enum <= 45) then local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]];elseif (Enum > 46) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 47) then  Environment[Instruction[OP_B]] = Stack[Instruction[OP_A]];end;elseif (Enum <= 49) then if (Enum == 48) then Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 49) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; for Index = Instruction[OP_A], Instruction[OP_B] do Stack[Index] = (nil); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 50) then Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return Stack[A](UnPack(Stack, A + 1, Top)) end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 51) then local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end;end;elseif (Enum <= 55) then if (Enum <= 53) then if (Enum == 52) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 53) then local A = Instruction[OP_A]; local Step = Stack[A + 2]; local Index = Stack[A] + Step; Stack[A] = Index; if (Step > 0) then if (Index <= Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end; elseif (Index >= Stack[A+1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end;end;elseif (Enum == 54) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 55) then local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]](); Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 57) then if (Enum == 56) then local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end;elseif (Enum <= 57) then Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0);end;elseif (Enum == 58) then local A = Instruction[OP_A]; local B = Instruction[OP_B]; local Offset = 50 * (Instruction[OP_C] - 1); local T = Stack[A]; local Count = 0; for Index = A + 1, B do T[Offset + Count + 1] = Stack[A + (Index - A)]; Count = Count + 1; end;elseif (Enum <= 59) then if (not (Stack[Instruction[OP_A]])) then InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum <= 89) then if (Enum <= 74) then if (Enum <= 66) then if (Enum <= 62) then if (Enum <= 60) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 61) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 62) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 64) then if (Enum > 63) then local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end;elseif (Enum < 64) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]];end;elseif (Enum > 65) then local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum < 66) then  local A = Instruction[OP_A]; do return Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])) end;end;elseif (Enum <= 70) then if (Enum <= 68) then if (Enum > 67) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 68) then  if (Stack[Instruction[OP_A]] == Instruction[OP_C]) then InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum > 69) then local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 70) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Instruction[OP_C];end;elseif (Enum <= 72) then if (Enum == 71) then Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 72) then local Function = Functions[Instruction[OP_B]]; local fUpValues = Instruction[OP_D]; local Indexes = {}; local nUpValues = SetMetaTable({}, { __index = function(_, Key) local UpValue = Indexes[Key]; return (UpValue[1][UpValue[2]]); end, __newindex = function(_, Key, Value) local UpValue = Indexes[Key]; UpValue[1][UpValue[2]] = Value; end; }); for Index = 1, Instruction[OP_C], 1 do local UpValue = fUpValues[Index]; if (UpValue[0] == 0) then Indexes[Index - 1] = ({ Stack, UpValue[1] }); else Indexes[Index - 1] = ({ UpValues, UpValue[1] }); end; lUpValues[#lUpValues + 1] = Indexes; end; Stack[Instruction[OP_A]] = Wrap(Function, nUpValues, Environment);end;elseif (Enum > 73) then Stack[Instruction[OP_A]] = Instruction[OP_B];elseif (Enum < 74) then  Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]];end;elseif (Enum <= 81) then if (Enum <= 77) then if (Enum <= 75) then local A = Instruction[OP_A]; local Close = {}; for Index = 1, #lUpValues, 1 do local List = lUpValues[Index]; for Index = 0, #List, 1 do local UpValue = List[Index]; local oStack = UpValue[1]; local Position = UpValue[2]; if ((oStack == Stack) and (Position >= A)) then Close[Position] = oStack[Position]; UpValue[1] = Close; end; end; end;elseif (Enum > 76) then if (Stack[Instruction[OP_A]] ~= Stack[Instruction[OP_C]]) then InstructionPoint = Instruction[OP_B]; end;elseif (Enum < 77) then  Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] / Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] / Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B] * Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; UpValues[Instruction[OP_B]] = Stack[Instruction[OP_A]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])) end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 79) then if (Enum == 78) then if (Stack[Instruction[OP_A]] <= Stack[Instruction[OP_C]]) then InstructionPoint = Instruction[OP_B]; end;elseif (Enum <= 79) then local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end;end;elseif (Enum == 80) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B] - Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 81) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 85) then if (Enum <= 83) then if (Enum > 82) then local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum < 83) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 84) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 85) then Stack[Instruction[OP_A]] = Instruction[OP_B] * Stack[Instruction[OP_C]];end;elseif (Enum <= 87) then if (Enum == 86) then Stack[Instruction[OP_A]] = Instruction[OP_B] ^ Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B] ^ Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 87) then Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]];end;elseif (Enum > 88) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 89) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] / Instruction[OP_C]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 104) then if (Enum <= 96) then if (Enum <= 92) then if (Enum <= 90) then Stack[Instruction[OP_A]]();elseif (Enum > 91) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Close = {}; for Index = 1, #lUpValues, 1 do local List = lUpValues[Index]; for Index = 0, #List, 1 do local UpValue = List[Index]; local oStack = UpValue[1]; local Position = UpValue[2]; if ((oStack == Stack) and (Position >= A)) then Close[Position] = oStack[Position]; UpValue[1] = Close; end; end; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 92) then  local A = Instruction[OP_A]; Stack[A] = Stack[A]();end;elseif (Enum <= 94) then if (Enum == 93) then Stack[Instruction[OP_A]] = Instruction[OP_B] ^ Stack[Instruction[OP_C]];elseif (Enum <= 94) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 95) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 96) then  Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 100) then if (Enum <= 98) then if (Enum > 97) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] / Instruction[OP_C];elseif (Enum < 98) then  Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 99) then Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] / Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] / Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; UpValues[Instruction[OP_B]] = Stack[Instruction[OP_A]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])) end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 100) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Instruction[OP_C];end;elseif (Enum <= 102) then if (Enum == 101) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end;elseif (Enum <= 102) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 103) then local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 104) then  do return; end;end;elseif (Enum <= 112) then if (Enum <= 108) then if (Enum <= 106) then if (Enum == 105) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]];elseif (Enum <= 106) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 107) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 108) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]];end;elseif (Enum <= 110) then if (Enum == 109) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Stack[Instruction[OP_C]];elseif (Enum <= 110) then Stack[Instruction[OP_A]] = Create(Instruction[OP_B]);end;elseif (Enum > 111) then Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 112) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]];end;elseif (Enum <= 116) then if (Enum <= 114) then if (Enum > 113) then local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result;elseif (Enum < 114) then  Stack[Instruction[OP_A]] = Wrap(Functions[Instruction[OP_B]], (nil), Environment);end;elseif (Enum > 115) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Stack[Instruction[OP_C]];elseif (Enum < 116) then  local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 118) then if (Enum == 117) then local A = Instruction[OP_A]; do return Stack[A](UnPack(Stack, A + 1, Top)) end;elseif (Enum <= 118) then if (Stack[Instruction[OP_A]] == Stack[Instruction[OP_C]]) then InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum == 119) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] % Instruction[OP_C];elseif (Enum <= 120) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C];end;  					end; 				end); 			end;  			  			return Wrap(Deserialize(), {}, GetFEnv())(...);  end)(({[(303379594)]=(((387702165 - #("Go to line 30 delete the meme string and replace it with print(ss) boom deobfuscated - tabby"))));["vcCvE"]=(((53 - #("game.Workspace.FilteringEnabled = false"))));x2pZ0hg=((0x2960BF5A));[(423809690)]=("\111");[((962181381 - #("i like men")))]=((0xAEE79));pHZJT=((0x1388));[((#{} + 752743177))]=(((189 - #("deeznutsfitinurscript"))));[(171549184)]=(((#{889;0x1BA;161;} + 732791273)));['rCU2iMO0hB']=("\110");[((898842550 - #("Diseases")))]=(((18 - #("yes ruqen i agree"))));[((434774010 - #("1+1=3")))]=((896452013));[(0xA46CAE9)]=((625053312));["DZPLo5G"]=(((141 - #("send help"))));[((551344956 - #("No")))]=((0x197BD894));[((988442281 - #("What about n word?")))]=(((#{(function(...)return ...;end)(539,0x19F)} + 0x004)));[(0x3462EC40)]=((0));[((642428746 - #("tutorial on how to deobfuscate go to rael100.net and type ur information and it will be automaticlly deobfuscated!!")))]=("\98");[((#{0x1A3;670;0x005;0x0AA;(function(...)return 96,...;end)(364)} + 360355326))]=((91));[(0xBD2336C)]=("\103");[(0xF47F842)]=("\108");['hvdkPJRn']=((546544979));RgJEr=("\118");[((105668300 - #("No")))]=((65536));[(694206298)]=("\50");[(196517554)]=(((731481522 - #("f1rt is the best"))));[((744730035 - #("too ez")))]=((248));[(0xDD386D4)]=(((#{0x015;0x1F2;830;(function(...)return 850,0x323,892,...;end)()} + 30)));["hZxNZLS"]=("\109");[(0x7872809)]=(((423809700 - #("table cool"))));[(0x4C32C4F)]=("\112");[(164680059)]=((0x01A));[(49530139)]=(((#{0x31E;17;849;(function(...)return 711,0x292,0x1F1,0x02C,...;end)(438,117,0x2AC)} - 0x008)));[((92172232 - #("retard")))]=("\114");[((#{0x031;708;749;(function(...)return 0x0DE,0x001;end)()} + 0x3449708A))]=((90));[(0x35096E3A)]=(((#{0x262;0x2C4;0x305;} + 267878)));[((#{970;247;(function(...)return 894,366,755;end)()} + 0x2B99859D))]=("\116");[((#{0x283;835;(function(...)return 183,0x0B1;end)()} + 247355424))]=(((960042069 - #("420 petabytes worth of text to scroll through left!!!"))));i0Bxf0V=((703189860));[((#{0x286;(function(...)return ;end)()} + 0x20939D52))]=("\104");[(0x171BDD39)]=("\102");[((427546797 - #("decided to be fairy today")))]=("\121");[((126491212 - #("PSU on top")))]=((21));[((580599252 - #("retard")))]=((0x008));[((364145960 - #("sussy")))]=((0x36EB8D68));[(0x88911EB)]=((92172226));[(250750729)]=((4));[(896452013)]=("\100");Ait1P5eIe3=((188045117));[((#{(function(...)return 992,0x373;end)()} + 0x36EB8D66))]=("\97");[(0x387B2B58)]=((0x264AAED7));[((#{0x2AA;(function(...)return 0x072,0x052;end)()} + 861226319))]=(((#{0x0B5;0x259;0x115;(function(...)return 0x333,0x077,...;end)(0x038)} + 900183)));[(0x29E9D364)]=("\120");[((#{0x36E;600;} + 0x38D6280D))]=((5));["wTOusc"]=("\101");[(0x39391420)]=("\107");[(98642189)]=(((#{297;0x0E0;} + 0x001)));[((145964649 - #("table cool")))]=((256));RmADV3=(((38 - #("Module"))));HXhGIr3Ik=("\117");[(0x25418E80)]=("\115");["Niaj3Ix0bh"]=(((718304 - #("Freerobuxnoscam!1!.com"))));[((#{} + 373603687))]=((0xF47F842));[((158031675 - #("1+1=3")))]=(((#{} + 20)));[((#{0x378;294;0x36F;0x1FE;(function(...)return 0x3D7;end)()} + 0x1E9B6143))]=((0x01F));[(188045117)]=("\99");[(676967228)]=((198325100));[(455116872)]=(((#{0x372;(function(...)return 696,0x120;end)()} + 0x031)));['v9PUhJuJH']=("\51");['gbOno52h']=((0x0A5));[((732791363 - #("ratio + L + bozo + try deobfuscating this kid + I deobfuscated your mother + PSU on top")))]=("\105");[(237475400)]=((0x007));[(0x2DA22374)]=(((#{0x036;0x14D;535;(function(...)return ...;end)(0x191,0x081,0x0C6)} + 0xF1EB9)));[(408971884)]=(((#{816;564;0x012;0x1EA;(function(...)return 493,373,0x087,0x194;end)()} + 0x4C32C47)));LUQE2tYN=((0x09F));[(0xF69E996)]=((0x1000000));[(0x209276F2)]=(((1132 - #("guys promise you can deobfuscate by removing 1 one of the memestring then beautifying the code it will work!!"))));[(642553668)]=(((2079 - #("bro's looking at the source code"))));}), ...);
